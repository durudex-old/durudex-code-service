// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package durudexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCodeServiceClient is the client API for UserCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCodeServiceClient interface {
	// Creating a new user verification code.
	CreateVerifyUserEmailCode(ctx context.Context, in *CreateVerifyUserEmailCodeRequest, opts ...grpc.CallOption) (*CreateVerifyUserEmailCodeResponse, error)
	// Verifying a user email code.
	VerifyUserEmailCode(ctx context.Context, in *VerifyUserEmailCodeRequest, opts ...grpc.CallOption) (*VerifyUserEmailCodeResponse, error)
}

type userCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCodeServiceClient(cc grpc.ClientConnInterface) UserCodeServiceClient {
	return &userCodeServiceClient{cc}
}

func (c *userCodeServiceClient) CreateVerifyUserEmailCode(ctx context.Context, in *CreateVerifyUserEmailCodeRequest, opts ...grpc.CallOption) (*CreateVerifyUserEmailCodeResponse, error) {
	out := new(CreateVerifyUserEmailCodeResponse)
	err := c.cc.Invoke(ctx, "/durudex.v1.UserCodeService/CreateVerifyUserEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCodeServiceClient) VerifyUserEmailCode(ctx context.Context, in *VerifyUserEmailCodeRequest, opts ...grpc.CallOption) (*VerifyUserEmailCodeResponse, error) {
	out := new(VerifyUserEmailCodeResponse)
	err := c.cc.Invoke(ctx, "/durudex.v1.UserCodeService/VerifyUserEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCodeServiceServer is the server API for UserCodeService service.
// All implementations must embed UnimplementedUserCodeServiceServer
// for forward compatibility
type UserCodeServiceServer interface {
	// Creating a new user verification code.
	CreateVerifyUserEmailCode(context.Context, *CreateVerifyUserEmailCodeRequest) (*CreateVerifyUserEmailCodeResponse, error)
	// Verifying a user email code.
	VerifyUserEmailCode(context.Context, *VerifyUserEmailCodeRequest) (*VerifyUserEmailCodeResponse, error)
	mustEmbedUnimplementedUserCodeServiceServer()
}

// UnimplementedUserCodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserCodeServiceServer struct {
}

func (UnimplementedUserCodeServiceServer) CreateVerifyUserEmailCode(context.Context, *CreateVerifyUserEmailCodeRequest) (*CreateVerifyUserEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerifyUserEmailCode not implemented")
}
func (UnimplementedUserCodeServiceServer) VerifyUserEmailCode(context.Context, *VerifyUserEmailCodeRequest) (*VerifyUserEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserEmailCode not implemented")
}
func (UnimplementedUserCodeServiceServer) mustEmbedUnimplementedUserCodeServiceServer() {}

// UnsafeUserCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCodeServiceServer will
// result in compilation errors.
type UnsafeUserCodeServiceServer interface {
	mustEmbedUnimplementedUserCodeServiceServer()
}

func RegisterUserCodeServiceServer(s grpc.ServiceRegistrar, srv UserCodeServiceServer) {
	s.RegisterService(&UserCodeService_ServiceDesc, srv)
}

func _UserCodeService_CreateVerifyUserEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVerifyUserEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeServiceServer).CreateVerifyUserEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.v1.UserCodeService/CreateVerifyUserEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeServiceServer).CreateVerifyUserEmailCode(ctx, req.(*CreateVerifyUserEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCodeService_VerifyUserEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCodeServiceServer).VerifyUserEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.v1.UserCodeService/VerifyUserEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCodeServiceServer).VerifyUserEmailCode(ctx, req.(*VerifyUserEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCodeService_ServiceDesc is the grpc.ServiceDesc for UserCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "durudex.v1.UserCodeService",
	HandlerType: (*UserCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVerifyUserEmailCode",
			Handler:    _UserCodeService_CreateVerifyUserEmailCode_Handler,
		},
		{
			MethodName: "VerifyUserEmailCode",
			Handler:    _UserCodeService_VerifyUserEmailCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "durudex/v1/user_code.proto",
}
