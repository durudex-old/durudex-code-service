// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package durudexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailUserServiceClient is the client API for EmailUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailUserServiceClient interface {
	// Sending an email to a user with a verification code.
	SendEmailUserCode(ctx context.Context, in *SendEmailUserCodeRequest, opts ...grpc.CallOption) (*SendEmailUserCodeResponse, error)
	// Sending an email to a user with logged in.
	SendEmailUserLoggedIn(ctx context.Context, in *SendEmailUserLoggedInRequest, opts ...grpc.CallOption) (*SendEmailUserLoggedInResponse, error)
	// Sending an email to a user with register.
	SendEmailUserRegister(ctx context.Context, in *SendEmailUserRegisterRequest, opts ...grpc.CallOption) (*SendEmailUserRegisterResponse, error)
}

type emailUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailUserServiceClient(cc grpc.ClientConnInterface) EmailUserServiceClient {
	return &emailUserServiceClient{cc}
}

func (c *emailUserServiceClient) SendEmailUserCode(ctx context.Context, in *SendEmailUserCodeRequest, opts ...grpc.CallOption) (*SendEmailUserCodeResponse, error) {
	out := new(SendEmailUserCodeResponse)
	err := c.cc.Invoke(ctx, "/durudex.v1.EmailUserService/SendEmailUserCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailUserServiceClient) SendEmailUserLoggedIn(ctx context.Context, in *SendEmailUserLoggedInRequest, opts ...grpc.CallOption) (*SendEmailUserLoggedInResponse, error) {
	out := new(SendEmailUserLoggedInResponse)
	err := c.cc.Invoke(ctx, "/durudex.v1.EmailUserService/SendEmailUserLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailUserServiceClient) SendEmailUserRegister(ctx context.Context, in *SendEmailUserRegisterRequest, opts ...grpc.CallOption) (*SendEmailUserRegisterResponse, error) {
	out := new(SendEmailUserRegisterResponse)
	err := c.cc.Invoke(ctx, "/durudex.v1.EmailUserService/SendEmailUserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailUserServiceServer is the server API for EmailUserService service.
// All implementations must embed UnimplementedEmailUserServiceServer
// for forward compatibility
type EmailUserServiceServer interface {
	// Sending an email to a user with a verification code.
	SendEmailUserCode(context.Context, *SendEmailUserCodeRequest) (*SendEmailUserCodeResponse, error)
	// Sending an email to a user with logged in.
	SendEmailUserLoggedIn(context.Context, *SendEmailUserLoggedInRequest) (*SendEmailUserLoggedInResponse, error)
	// Sending an email to a user with register.
	SendEmailUserRegister(context.Context, *SendEmailUserRegisterRequest) (*SendEmailUserRegisterResponse, error)
	mustEmbedUnimplementedEmailUserServiceServer()
}

// UnimplementedEmailUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailUserServiceServer struct {
}

func (UnimplementedEmailUserServiceServer) SendEmailUserCode(context.Context, *SendEmailUserCodeRequest) (*SendEmailUserCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailUserCode not implemented")
}
func (UnimplementedEmailUserServiceServer) SendEmailUserLoggedIn(context.Context, *SendEmailUserLoggedInRequest) (*SendEmailUserLoggedInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailUserLoggedIn not implemented")
}
func (UnimplementedEmailUserServiceServer) SendEmailUserRegister(context.Context, *SendEmailUserRegisterRequest) (*SendEmailUserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailUserRegister not implemented")
}
func (UnimplementedEmailUserServiceServer) mustEmbedUnimplementedEmailUserServiceServer() {}

// UnsafeEmailUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailUserServiceServer will
// result in compilation errors.
type UnsafeEmailUserServiceServer interface {
	mustEmbedUnimplementedEmailUserServiceServer()
}

func RegisterEmailUserServiceServer(s grpc.ServiceRegistrar, srv EmailUserServiceServer) {
	s.RegisterService(&EmailUserService_ServiceDesc, srv)
}

func _EmailUserService_SendEmailUserCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailUserCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailUserServiceServer).SendEmailUserCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.v1.EmailUserService/SendEmailUserCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailUserServiceServer).SendEmailUserCode(ctx, req.(*SendEmailUserCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailUserService_SendEmailUserLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailUserLoggedInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailUserServiceServer).SendEmailUserLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.v1.EmailUserService/SendEmailUserLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailUserServiceServer).SendEmailUserLoggedIn(ctx, req.(*SendEmailUserLoggedInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailUserService_SendEmailUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailUserServiceServer).SendEmailUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.v1.EmailUserService/SendEmailUserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailUserServiceServer).SendEmailUserRegister(ctx, req.(*SendEmailUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailUserService_ServiceDesc is the grpc.ServiceDesc for EmailUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "durudex.v1.EmailUserService",
	HandlerType: (*EmailUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmailUserCode",
			Handler:    _EmailUserService_SendEmailUserCode_Handler,
		},
		{
			MethodName: "SendEmailUserLoggedIn",
			Handler:    _EmailUserService_SendEmailUserLoggedIn_Handler,
		},
		{
			MethodName: "SendEmailUserRegister",
			Handler:    _EmailUserService_SendEmailUserRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "durudex/v1/email_user.proto",
}
